/*! stock-app 2014-09-15 */
"use strict";

window.App = Ember.Application.create({}), App.ApplicationAdapter = DS.RESTAdapter.extend({
    host: "http://finance.bigemployee.io"
}), App.QuoteAdapter = DS.RESTAdapter.extend({
    host: "https://query.yahooapis.com",
    namespace: "v1/public",
    buildURL: function(type, id) {
        type = !1;
        var url = this._super(type, id);
        return url;
    }
}), App.ChartAdapter = DS.RESTAdapter.extend({
    host: "http://finance.bigemployee.io",
    pathForType: function(type) {
        var camelized = Ember.String.camelize(type);
        return camelized;
    }
}), App.ApplicationSerializer = DS.RESTSerializer.extend({
    primaryKey: "symbol",
    normalizePayload: function(payload) {
        var symbols = payload.ResultSet.Result;
        return payload = {
            symbols: symbols
        };
    }
}), App.QuoteSerializer = DS.RESTSerializer.extend({
    primaryKey: "symbol",
    normalizePayload: function(payload) {
        return payload = {
            quote: [ payload.query.results.quote ]
        };
    }
}), App.ChartSerializer = DS.RESTSerializer.extend({
    normalizePayload: function(payload) {
        return payload = {
            chart: payload
        };
    }
});

var attr = DS.attr, hasMany = DS.hasMany, belongsTo = DS.belongsTo, currentIndex = -1, searchResultIndex = -1, navigate = function(direction) {
    searchResultIndex += direction;
    var results = $(".list-group-item");
    searchResultIndex >= results.length && (searchResultIndex = 0), 0 > searchResultIndex && (searchResultIndex = results.length - 1), 
    results.eq(searchResultIndex).focus(), currentIndex = searchResultIndex;
};

Ember.TEMPLATES[404] = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    function program1(depth0, data) {
        data.buffer.push("$ AAPL");
    }
    function program3(depth0, data) {
        data.buffer.push("$ GOOG");
    }
    function program5(depth0, data) {
        data.buffer.push("$ P");
    }
    function program7(depth0, data) {
        data.buffer.push("$ INTC");
    }
    function program9(depth0, data) {
        data.buffer.push("$ TWTR");
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {};
    var stack1, helper, options, buffer = "", self = this, helperMissing = helpers.helperMissing;
    return data.buffer.push('<div class="jumbotron">\n    <h1>OOPS!</h1>\n    <p class="tagline">\n        Could not find what you were looking for.\n    </p>\n    <p>How about something else? Here are few good ones.</p>\n    <p>\n        '), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            "class": "btn btn-primary btn-lg"
        },
        hashTypes: {
            "class": "STRING"
        },
        hashContexts: {
            "class": depth0
        },
        inverse: self.noop,
        fn: self.program(1, program1, data),
        contexts: [ depth0, depth0, depth0 ],
        types: [ "STRING", "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "AAPL", "1m", options) : helperMissing.call(depth0, "link-to", "period", "AAPL", "1m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n        "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            "class": "btn btn-primary btn-lg"
        },
        hashTypes: {
            "class": "STRING"
        },
        hashContexts: {
            "class": depth0
        },
        inverse: self.noop,
        fn: self.program(3, program3, data),
        contexts: [ depth0, depth0, depth0 ],
        types: [ "STRING", "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "GOOG", "1m", options) : helperMissing.call(depth0, "link-to", "period", "GOOG", "1m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n        "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            "class": "btn btn-primary btn-lg"
        },
        hashTypes: {
            "class": "STRING"
        },
        hashContexts: {
            "class": depth0
        },
        inverse: self.noop,
        fn: self.program(5, program5, data),
        contexts: [ depth0, depth0, depth0 ],
        types: [ "STRING", "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "P", "1m", options) : helperMissing.call(depth0, "link-to", "period", "P", "1m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n        "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            "class": "btn btn-primary btn-lg"
        },
        hashTypes: {
            "class": "STRING"
        },
        hashContexts: {
            "class": depth0
        },
        inverse: self.noop,
        fn: self.program(7, program7, data),
        contexts: [ depth0, depth0, depth0 ],
        types: [ "STRING", "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "INTC", "1m", options) : helperMissing.call(depth0, "link-to", "period", "INTC", "1m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n        "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            "class": "btn btn-primary btn-lg"
        },
        hashTypes: {
            "class": "STRING"
        },
        hashContexts: {
            "class": depth0
        },
        inverse: self.noop,
        fn: self.program(9, program9, data),
        contexts: [ depth0, depth0, depth0 ],
        types: [ "STRING", "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "TWTR", "1m", options) : helperMissing.call(depth0, "link-to", "period", "TWTR", "1m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n    </p>\n</div>"), 
    buffer;
}), Ember.TEMPLATES.application = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {};
    var stack1, helper, options, buffer = "", helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
    return data.buffer.push(escapeExpression((helper = helpers.partial || depth0 && depth0.partial, 
    options = {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }, helper ? helper.call(depth0, "navbar", options) : helperMissing.call(depth0, "partial", "navbar", options)))), 
    data.buffer.push('\r\n<div class="container">\r\n    '), stack1 = helpers._triageMustache.call(depth0, "outlet", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\r\n</div>\r\n"), 
    data.buffer.push(escapeExpression((helper = helpers.partial || depth0 && depth0.partial, 
    options = {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }, helper ? helper.call(depth0, "footer", options) : helperMissing.call(depth0, "partial", "footer", options)))), 
    buffer;
}), Ember.TEMPLATES.chart = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {};
    var stack1, buffer = "";
    return data.buffer.push('<section id="quote">\r\n    '), stack1 = helpers._triageMustache.call(depth0, "outlet", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\r\n</section>"), 
    buffer;
}), Ember.TEMPLATES.footer = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {}, data.buffer.push('<footer class="container">\n    <hr />\n    <span class="pull-left text-muted">@NorikDavtian</span>\n    <span class="pull-right text-muted">norik@bigemployee.com</span>\n</footer>');
}), Ember.TEMPLATES.index = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    function program1(depth0, data) {
        data.buffer.push("$ AAPL");
    }
    function program3(depth0, data) {
        data.buffer.push("$ GOOG");
    }
    function program5(depth0, data) {
        data.buffer.push("$ P");
    }
    function program7(depth0, data) {
        data.buffer.push("$ INTC");
    }
    function program9(depth0, data) {
        data.buffer.push("$ TWTR");
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {};
    var stack1, helper, options, buffer = "", self = this, helperMissing = helpers.helperMissing;
    return data.buffer.push('<div class="jumbotron">\n    <h1>Hiiiii there!</h1>\n    <p class="tagline">\n        Lookup for a symbol to get started.\n    </p>\n    <p>Not sure what to look for? Here are few good ones.</p>\n    <p>\n        '), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            "class": "btn btn-primary btn-lg"
        },
        hashTypes: {
            "class": "STRING"
        },
        hashContexts: {
            "class": depth0
        },
        inverse: self.noop,
        fn: self.program(1, program1, data),
        contexts: [ depth0, depth0, depth0 ],
        types: [ "STRING", "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "AAPL", "1m", options) : helperMissing.call(depth0, "link-to", "period", "AAPL", "1m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n        "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            "class": "btn btn-primary btn-lg"
        },
        hashTypes: {
            "class": "STRING"
        },
        hashContexts: {
            "class": depth0
        },
        inverse: self.noop,
        fn: self.program(3, program3, data),
        contexts: [ depth0, depth0, depth0 ],
        types: [ "STRING", "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "GOOG", "1m", options) : helperMissing.call(depth0, "link-to", "period", "GOOG", "1m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n        "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            "class": "btn btn-primary btn-lg"
        },
        hashTypes: {
            "class": "STRING"
        },
        hashContexts: {
            "class": depth0
        },
        inverse: self.noop,
        fn: self.program(5, program5, data),
        contexts: [ depth0, depth0, depth0 ],
        types: [ "STRING", "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "P", "1m", options) : helperMissing.call(depth0, "link-to", "period", "P", "1m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n        "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            "class": "btn btn-primary btn-lg"
        },
        hashTypes: {
            "class": "STRING"
        },
        hashContexts: {
            "class": depth0
        },
        inverse: self.noop,
        fn: self.program(7, program7, data),
        contexts: [ depth0, depth0, depth0 ],
        types: [ "STRING", "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "INTC", "1m", options) : helperMissing.call(depth0, "link-to", "period", "INTC", "1m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n        "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            "class": "btn btn-primary btn-lg"
        },
        hashTypes: {
            "class": "STRING"
        },
        hashContexts: {
            "class": depth0
        },
        inverse: self.noop,
        fn: self.program(9, program9, data),
        contexts: [ depth0, depth0, depth0 ],
        types: [ "STRING", "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "TWTR", "1m", options) : helperMissing.call(depth0, "link-to", "period", "TWTR", "1m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n    </p>\n</div>"), 
    buffer;
}), Ember.TEMPLATES.navbar = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    function program1(depth0, data) {
        data.buffer.push("Ember Stocks and Charts");
    }
    function program3(depth0, data) {
        var stack1, helper, options, buffer = "";
        return data.buffer.push('\n        <div class="input-group">\n            <span class="input-group-addon">$\n                '), 
        stack1 = helpers["if"].call(depth0, "isSearching", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            inverse: self.noop,
            fn: self.program(4, program4, data),
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n            </span>\n            "), 
        data.buffer.push(escapeExpression((helper = helpers.input || depth0 && depth0.input, 
        options = {
            hash: {
                placeholder: "Symbol Lookup",
                autocomplete: "off",
                classNames: "form-control",
                valueBinding: "searchTerm"
            },
            hashTypes: {
                placeholder: "STRING",
                autocomplete: "STRING",
                classNames: "STRING",
                valueBinding: "STRING"
            },
            hashContexts: {
                placeholder: depth0,
                autocomplete: depth0,
                classNames: depth0,
                valueBinding: depth0
            },
            contexts: [],
            types: [],
            data: data
        }, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "input", options)))), 
        data.buffer.push('\n            <div id="search-results-list" class="list-group">\n                '), 
        stack1 = helpers.each.call(depth0, {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            inverse: self.noop,
            fn: self.program(6, program6, data),
            contexts: [],
            types: [],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push('\n            </div>\n            <div class="input-group-btn">\n                <button class="btn btn-default" '), 
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "search", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "STRING" ],
            data: data
        }))), data.buffer.push('><i class="glyphicon glyphicon-search"></i></button>\n            </div>\n        </div>\n        '), 
        buffer;
    }
    function program4(depth0, data) {
        data.buffer.push('\n                <span class="glyphicon glyphicon-refresh spin"></span>\n                ');
    }
    function program6(depth0, data) {
        var stack1, helper, options, buffer = "";
        return data.buffer.push("\n                "), helper = helpers["link-to"] || depth0 && depth0["link-to"], 
        options = {
            hash: {
                "class": "list-group-item"
            },
            hashTypes: {
                "class": "STRING"
            },
            hashContexts: {
                "class": depth0
            },
            inverse: self.noop,
            fn: self.program(7, program7, data),
            contexts: [ depth0, depth0, depth0 ],
            types: [ "STRING", "ID", "STRING" ],
            data: data
        }, stack1 = helper ? helper.call(depth0, "period", "id", "1m", options) : helperMissing.call(depth0, "link-to", "period", "id", "1m", options), 
        (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n                "), 
        buffer;
    }
    function program7(depth0, data) {
        var stack1, buffer = "";
        return data.buffer.push("\n                <strong>"), stack1 = helpers._triageMustache.call(depth0, "id", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</strong> - <small>"), 
        stack1 = helpers._triageMustache.call(depth0, "name", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</small>\n                "), 
        buffer;
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {};
    var stack1, helper, options, buffer = "", self = this, helperMissing = helpers.helperMissing, escapeExpression = this.escapeExpression;
    return data.buffer.push('<header class="navbar navbar-default">\n    <nav class="navbar-header" role="navigation">\n        '), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            "class": "navbar-brand"
        },
        hashTypes: {
            "class": "STRING"
        },
        hashContexts: {
            "class": depth0
        },
        inverse: self.noop,
        fn: self.program(1, program1, data),
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "index", options) : helperMissing.call(depth0, "link-to", "index", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n        "), 
    stack1 = helpers.view.call(depth0, "App.SearchView", {
        hash: {
            tagName: "form",
            classNames: "navbar-form pull-right",
            role: "search"
        },
        hashTypes: {
            tagName: "STRING",
            classNames: "STRING",
            role: "STRING"
        },
        hashContexts: {
            tagName: depth0,
            classNames: depth0,
            role: depth0
        },
        inverse: self.noop,
        fn: self.program(3, program3, data),
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\n    </nav>\n</header>"), 
    buffer;
}), Ember.TEMPLATES.quote = Ember.Handlebars.template(function(Handlebars, depth0, helpers, partials, data) {
    function program1(depth0, data) {
        var buffer = "";
        return data.buffer.push("<a "), data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            hash: {
                href: "view.href"
            },
            hashTypes: {
                href: "STRING"
            },
            hashContexts: {
                href: depth0
            },
            contexts: [],
            types: [],
            data: data
        }))), data.buffer.push(">1M</a>"), buffer;
    }
    function program3(depth0, data) {
        var buffer = "";
        return data.buffer.push("<a "), data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            hash: {
                href: "view.href"
            },
            hashTypes: {
                href: "STRING"
            },
            hashContexts: {
                href: depth0
            },
            contexts: [],
            types: [],
            data: data
        }))), data.buffer.push(">3M</a>"), buffer;
    }
    function program5(depth0, data) {
        var buffer = "";
        return data.buffer.push("<a "), data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            hash: {
                href: "view.href"
            },
            hashTypes: {
                href: "STRING"
            },
            hashContexts: {
                href: depth0
            },
            contexts: [],
            types: [],
            data: data
        }))), data.buffer.push(">6M</a>"), buffer;
    }
    function program7(depth0, data) {
        var buffer = "";
        return data.buffer.push("<a  "), data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            hash: {
                href: "view.href"
            },
            hashTypes: {
                href: "STRING"
            },
            hashContexts: {
                href: depth0
            },
            contexts: [],
            types: [],
            data: data
        }))), data.buffer.push(">1Y</a>"), buffer;
    }
    function program9(depth0, data) {
        var buffer = "";
        return data.buffer.push("<a  "), data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            hash: {
                href: "view.href"
            },
            hashTypes: {
                href: "STRING"
            },
            hashContexts: {
                href: depth0
            },
            contexts: [],
            types: [],
            data: data
        }))), data.buffer.push(">5Y</a>"), buffer;
    }
    function program11(depth0, data) {
        var buffer = "";
        return data.buffer.push("<a  "), data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {
            hash: {
                href: "view.href"
            },
            hashTypes: {
                href: "STRING"
            },
            hashContexts: {
                href: depth0
            },
            contexts: [],
            types: [],
            data: data
        }))), data.buffer.push(">Max</a>"), buffer;
    }
    function program13(depth0, data) {
        var stack1, buffer = "";
        return data.buffer.push("\r\n"), stack1 = helpers["if"].call(depth0, "isLoading", {
            hash: {},
            hashTypes: {},
            hashContexts: {},
            inverse: self.noop,
            fn: self.program(14, program14, data),
            contexts: [ depth0 ],
            types: [ "ID" ],
            data: data
        }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\r\n"), 
        buffer;
    }
    function program14(depth0, data) {
        data.buffer.push('\r\n<p id="chart-loading"><span class="glyphicon glyphicon-refresh spin"></span> Loading...</p>\r\n');
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], helpers = this.merge(helpers, Ember.Handlebars.helpers), 
    data = data || {};
    var stack1, helper, options, buffer = "", escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
    return data.buffer.push("<h1><strong>"), stack1 = helpers._triageMustache.call(depth0, "Symbol", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</strong> <small>"), 
    stack1 = helpers._triageMustache.call(depth0, "Name", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push('</small> <span class="price"><small>('), 
    stack1 = helpers._triageMustache.call(depth0, "Change", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push(")</small> $"), 
    stack1 = helpers._triageMustache.call(depth0, "LastTradePriceOnly", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push('</span></h1>\r\n\r\n<ul class="nav nav-tabs" role="tablist">\r\n    '), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(1, program1, data),
        contexts: [ depth0, depth0 ],
        types: [ "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "1m", options) : helperMissing.call(depth0, "link-to", "period", "1m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\r\n    "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(3, program3, data),
        contexts: [ depth0, depth0 ],
        types: [ "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "3m", options) : helperMissing.call(depth0, "link-to", "period", "3m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\r\n    "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(5, program5, data),
        contexts: [ depth0, depth0 ],
        types: [ "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "6m", options) : helperMissing.call(depth0, "link-to", "period", "6m", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\r\n    "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(7, program7, data),
        contexts: [ depth0, depth0 ],
        types: [ "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "1y", options) : helperMissing.call(depth0, "link-to", "period", "1y", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\r\n    "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(9, program9, data),
        contexts: [ depth0, depth0 ],
        types: [ "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "5y", options) : helperMissing.call(depth0, "link-to", "period", "5y", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\r\n    "), 
    helper = helpers["link-to"] || depth0 && depth0["link-to"], options = {
        hash: {
            tagName: "li"
        },
        hashTypes: {
            tagName: "STRING"
        },
        hashContexts: {
            tagName: depth0
        },
        inverse: self.noop,
        fn: self.program(11, program11, data),
        contexts: [ depth0, depth0 ],
        types: [ "STRING", "STRING" ],
        data: data
    }, stack1 = helper ? helper.call(depth0, "period", "max", options) : helperMissing.call(depth0, "link-to", "period", "max", options), 
    (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("\r\n</ul>\r\n"), 
    stack1 = helpers.view.call(depth0, "App.GraphView", {
        hash: {
            id: "chart",
            classNames: "tab-content"
        },
        hashTypes: {
            id: "STRING",
            classNames: "STRING"
        },
        hashContexts: {
            id: depth0,
            classNames: depth0
        },
        inverse: self.noop,
        fn: self.program(13, program13, data),
        contexts: [ depth0 ],
        types: [ "STRING" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push('\r\n\r\n<dl id="quote-details" class="dl-horizontal">\r\n    <dt>Last Trade Price</dt><dd>$'), 
    stack1 = helpers._triageMustache.call(depth0, "LastTradePriceOnly", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</dd>\r\n    <dt>Day's Range</dt><dd>$"), 
    stack1 = helpers._triageMustache.call(depth0, "DaysRange", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</dd>\r\n    <dt>Change</dt><dd>"), 
    stack1 = helpers._triageMustache.call(depth0, "Change", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</dd>\r\n    <dt>Volume</dt><dd>"), 
    stack1 = helpers._triageMustache.call(depth0, "Volume", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</dd>\r\n    <dt>Average Daily Volume</dt><dd>"), 
    stack1 = helpers._triageMustache.call(depth0, "AverageDailyVolume", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</dd>\r\n    <dt>Day's Low</dt><dd>$"), 
    stack1 = helpers._triageMustache.call(depth0, "DaysLow", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</dd>\r\n    <dt>Day's High</dt><dd>$"), 
    stack1 = helpers._triageMustache.call(depth0, "DaysHigh", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</dd>\r\n    <dt>Year Low</dt><dd>$"), 
    stack1 = helpers._triageMustache.call(depth0, "YearLow", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</dd>\r\n    <dt>Year High</dt><dd>$"), 
    stack1 = helpers._triageMustache.call(depth0, "YearHigh", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</dd>\r\n    <dt>Market Capitalization</dt><dd>$"), 
    stack1 = helpers._triageMustache.call(depth0, "MarketCapitalization", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</dd>\r\n    <dt>Stock Exchange<dd>"), 
    stack1 = helpers._triageMustache.call(depth0, "StockExchange", {
        hash: {},
        hashTypes: {},
        hashContexts: {},
        contexts: [ depth0 ],
        types: [ "ID" ],
        data: data
    }), (stack1 || 0 === stack1) && data.buffer.push(stack1), data.buffer.push("</dd>\r\n</dl>"), 
    buffer;
}), App.Chart = DS.Model.extend({
    Date: attr(),
    Close: attr()
}), App.Quote = DS.Model.extend({
    Symbol: attr(),
    AverageDailyVolume: attr(),
    Change: attr(),
    DaysLow: attr(),
    DaysHigh: attr(),
    YearLow: attr(),
    YearHigh: attr(),
    MarketCapitalization: attr(),
    LastTradePriceOnly: attr(),
    DaysRange: attr(),
    Name: attr(),
    Volume: attr(),
    StockExchange: attr()
}), App.Symbol = DS.Model.extend({
    symbol: attr(),
    name: attr()
}), App.ApplicationController = Ember.ArrayController.extend({
    searchTerm: null,
    searchTermChanged: function() {
        Ember.run.debounce(this, this.doSearch, 500);
    }.observes("searchTerm"),
    doSearch: function() {
        var searchTerm = this.get("searchTerm");
        if (searchTerm) {
            this.set("isSearching", !0);
            var controller = this;
            this.store.find("Symbol", {
                query: searchTerm
            }).then(function(searchResults) {
                controller.set("content", searchResults), controller.set("isSearching", !1);
            });
        }
    },
    actions: {
        search: function() {
            this.doSearch();
        }
    }
}), App.QuoteController = Ember.ObjectController.extend({
    isLoading: !0,
    chartContent: [],
    margin: "",
    width: "",
    height: "",
    parse: "",
    bisectDate: "",
    formatValue: "",
    formatCurrency: "",
    x: "",
    y: "",
    xAxis: "",
    yAxis: "",
    line: "",
    area: "",
    chart: "",
    updateChart: function() {
        function mousemove() {
            var x0 = x.invert(d3.mouse(this)[0]), i = bisectDate(content, x0, 1), d0 = content[i - 1], d1 = content[i], d = x0 - d0.date > d1.date - x0 ? d1 : d0;
            chart.select(".focus").attr("transform", "translate(" + x(d.date) + "," + y(d.close) + ")"), 
            chart.select(".focus").select("text").text(formatCurrency(d.close));
        }
        var chart = this.chart;
        if (chart) {
            var content = this.chartContent.toArray(), parse = (this.margin, this.width, this.height, 
            this.parse), bisectDate = this.bisectDate, formatCurrency = (this.formatValue, this.formatCurrency), x = this.x, y = this.y, xAxis = this.xAxis, yAxis = this.yAxis, line = this.line, area = this.area;
            content.reverse().forEach(function(d) {
                d.date = parse(d._data.Date), d.close = +d._data.Close;
            }), x.domain([ content[0].date, content[content.length - 1].date ]);
            var yMin = .99 * d3.min(content, function(d) {
                return d.close;
            }), yMax = 1.01 * d3.max(content, function(d) {
                return d.close;
            });
            y.domain([ yMin, yMax ]), chart.select(".x.axis").transition().call(xAxis), chart.select(".y.axis").transition().call(yAxis), 
            chart.selectAll("path.line").data(content).transition().attr("d", line(content)), 
            chart.selectAll("path.area").data(content).transition().attr("d", area(content)), 
            chart.select(".overlay").on("mousemove", mousemove);
        }
    }.observes("chartContent"),
    actions: {
        render: function(elementId) {
            function mousemove() {
                var x0 = x.invert(d3.mouse(this)[0]), i = bisectDate(content, x0, 1), d0 = content[i - 1], d1 = content[i], d = x0 - d0.date > d1.date - x0 ? d1 : d0;
                focus.attr("transform", "translate(" + x(d.date) + "," + y(d.close) + ")"), focus.select("text").text(formatCurrency(d.close));
            }
            var content = this.chartContent.toArray(), margin = {
                top: 20,
                right: 30,
                bottom: 25,
                left: 50
            }, width = 770 - margin.left - margin.right, height = 300 - margin.top - margin.bottom, parse = d3.time.format("%Y-%m-%d").parse, bisectDate = d3.bisector(function(d) {
                return d.date;
            }).left, formatValue = d3.format(",.2f"), formatCurrency = function(d) {
                return "$" + formatValue(d);
            }, x = d3.time.scale().range([ 0, width ]), y = d3.scale.linear().range([ height, 0 ]), xAxis = d3.svg.axis().scale(x).orient("bottom"), yAxis = d3.svg.axis().scale(y).orient("left"), line = d3.svg.line().x(function(d) {
                return x(d.date);
            }).y(function(d) {
                return y(d.close);
            }), area = d3.svg.area().x(function(d) {
                return x(d.date);
            }).y0(height).y1(function(d) {
                return y(d.close);
            }), chart = d3.select("#" + elementId).append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).attr("viewBox", "0 0 " + (width + margin.left + margin.right) + " " + (height + margin.top + margin.bottom)).attr("preserveAspectRatio", "xMinYMin").append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
            content.reverse().forEach(function(d) {
                d.date = parse(d._data.Date), d.close = +d._data.Close;
            }), x.domain([ content[0].date, content[content.length - 1].date ]);
            var yMin = .99 * d3.min(content, function(d) {
                return d.close;
            }), yMax = 1.01 * d3.max(content, function(d) {
                return d.close;
            });
            y.domain([ yMin, yMax ]), chart.append("path").datum(content).attr("class", "area").attr("d", area(content)), 
            chart.append("g").attr("class", "x axis").attr("preserveAspectRatio", "xMinYMin").attr("transform", "translate(0," + height + ")").call(xAxis), 
            chart.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("preserveAspectRatio", "xMinYMin").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("Price ($)"), 
            chart.append("path").datum(content).attr("class", "line").attr("d", line(content));
            var focus = chart.append("g").attr("class", "focus").style("display", "none");
            focus.append("circle").attr("r", 4.5), focus.append("text").attr("x", 9).attr("dy", ".35em"), 
            chart.append("rect").attr("class", "overlay").attr("width", width).attr("height", height).on("mouseover", function() {
                focus.style("display", null);
            }).on("mouseout", function() {
                focus.style("display", "none");
            }).on("mousemove", mousemove), this.set("margin", margin), this.set("width", width), 
            this.set("height", height), this.set("parse", parse), this.set("bisectDate", bisectDate), 
            this.set("formatValue", formatValue), this.set("formatCurrency", formatCurrency), 
            this.set("x", x), this.set("y", y), this.set("xAxis", xAxis), this.set("yAxis", yAxis), 
            this.set("line", line), this.set("area", area), this.set("chart", chart);
        }
    }
}), App.Router.map(function() {
    this.resource("chart", function() {
        this.resource("quote", {
            path: "/:ticker"
        }, function() {
            this.resource("period", {
                path: "/:period"
            });
        });
    }), this.route("404");
}), App.Symbol.FIXTURES = [ {
    id: "1",
    symbol: "A",
    name: "Agilent Technologies Inc.",
    exch: "NYQ",
    type: "S",
    exchDisp: "NYSE",
    typeDisp: "Equity"
}, {
    id: "2",
    symbol: "ASK.PA",
    name: "ASK",
    exch: "PAR",
    type: "S",
    exchDisp: "Paris",
    typeDisp: "Equity"
}, {
    id: "3",
    symbol: "AAPL",
    name: "Apple Inc.",
    exch: "NMS",
    type: "S",
    exchDisp: "NASDAQ",
    typeDisp: "Equity"
}, {
    id: "4",
    symbol: "^DJI",
    name: "Dow Jones Industrial Average",
    exch: "DJI",
    type: "I",
    typeDisp: "Index"
}, {
    id: "5",
    symbol: "BAC",
    name: "Bank of America Corporation",
    exch: "NYQ",
    type: "S",
    exchDisp: "NYSE",
    typeDisp: "Equity"
}, {
    id: "6",
    symbol: "YHOO",
    name: "Yahoo! Inc.",
    exch: "NMS",
    type: "S",
    exchDisp: "NASDAQ",
    typeDisp: "Equity"
}, {
    id: "7",
    symbol: "AMZN",
    name: "Amazon.com Inc.",
    exch: "NMS",
    type: "S",
    exchDisp: "NASDAQ",
    typeDisp: "Equity"
}, {
    id: "8",
    symbol: "T",
    name: "AT&T, Inc.",
    exch: "NYQ",
    type: "S",
    exchDisp: "NYSE",
    typeDisp: "Equity"
}, {
    id: "9",
    symbol: "AAP",
    name: "Advance Auto Parts Inc.",
    exch: "NYQ",
    type: "S",
    exchDisp: "NYSE",
    typeDisp: "Equity"
}, {
    id: "10",
    symbol: "AA",
    name: "Alcoa Inc.",
    exch: "NYQ",
    type: "S",
    exchDisp: "NYSE",
    typeDisp: "Equity"
} ], App.Quote.FIXTURES = [ {
    id: "1",
    symbol: "YHOO",
    AverageDailyVolume: "19965500",
    Change: "+0.50",
    DaysLow: "34.78",
    DaysHigh: "35.56",
    YearLow: "26.73",
    YearHigh: "41.72",
    MarketCapitalization: "35.671B",
    LastTradePriceOnly: "35.43",
    DaysRange: "34.78 - 35.56",
    Name: "Yahoo! Inc.",
    Symbol: "YHOO",
    Volume: "18379520",
    StockExchange: "NasdaqNM"
} ], App.PeriodRoute = Ember.Route.extend({
    model: function(params) {
        var ticker = this.modelFor("quote").get("id"), period = params.period, results = this.store.find("Chart", {
            s: ticker,
            t: period
        }).then(function(data) {
            return data;
        });
        return results;
    },
    afterModel: function(periodData) {
        periodData.get("length") || this.transitionTo("404");
    },
    setupController: function(controller, model) {
        this.controllerFor("quote").set("chartContent", model);
    },
    renderTemplate: function() {
        this.render("quote", {
            controller: "quote"
        });
    }
}), App.QuoteRoute = Ember.Route.extend({
    model: function(params) {
        var query = "yql?q=select%20*%20from%20yahoo.finance.quote%20where%20symbol%20in%20(%22" + params.ticker + "%22)&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&callback=", results = this.store.find("Quote", query);
        return results;
    },
    setupController: function(controller, model) {
        controller.set("content", model);
    }
}), App.GraphView = Ember.View.extend({
    didInsertElement: function() {
        var controller = this.get("controller"), elementId = this.get("elementId");
        Ember.run.scheduleOnce("afterRender", controller.send("render", elementId)), controller.set("isLoading", !1);
    }
}), App.QuoteView = Ember.View.extend({
    templateName: "quote"
}), App.SearchView = Ember.View.extend({
    results: "",
    didInsertElement: function() {
        this.results = $("#search-results-list");
    },
    focusIn: function() {
        this.results.slideDown();
    },
    keyUp: function(e) {
        40 === e.which ? navigate(1) : 38 === e.which ? navigate(-1) : 27 === e.which || 13 === e.which ? this.results.slideUp() : this.results.slideDown();
    },
    focusOut: function() {
        currentIndex === searchResultIndex && this.results.slideUp();
    }
});